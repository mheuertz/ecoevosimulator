// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// disperse
IntegerVector disperse(IntegerVector a, int Rdispersal, int grid);
RcppExport SEXP _ecoevosimulator_disperse(SEXP aSEXP, SEXP RdispersalSEXP, SEXP gridSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type Rdispersal(RdispersalSEXP);
    Rcpp::traits::input_parameter< int >::type grid(gridSEXP);
    rcpp_result_gen = Rcpp::wrap(disperse(a, Rdispersal, grid));
    return rcpp_result_gen;
END_RCPP
}
// forestgapdynamics
NumericMatrix forestgapdynamics(int grid, double Pfall, int Rgaps);
RcppExport SEXP _ecoevosimulator_forestgapdynamics(SEXP gridSEXP, SEXP PfallSEXP, SEXP RgapsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type grid(gridSEXP);
    Rcpp::traits::input_parameter< double >::type Pfall(PfallSEXP);
    Rcpp::traits::input_parameter< int >::type Rgaps(RgapsSEXP);
    rcpp_result_gen = Rcpp::wrap(forestgapdynamics(grid, Pfall, Rgaps));
    return rcpp_result_gen;
END_RCPP
}
// simulatorCpp
List simulatorCpp(Rcpp::NumericMatrix Topography, int grid, int Nt, double muG, double sigmaG, double muE, double sigmaE, double Pfall, int Rgaps, double Pdeath, int Ns, int Rdispersal, bool determinist);
RcppExport SEXP _ecoevosimulator_simulatorCpp(SEXP TopographySEXP, SEXP gridSEXP, SEXP NtSEXP, SEXP muGSEXP, SEXP sigmaGSEXP, SEXP muESEXP, SEXP sigmaESEXP, SEXP PfallSEXP, SEXP RgapsSEXP, SEXP PdeathSEXP, SEXP NsSEXP, SEXP RdispersalSEXP, SEXP deterministSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Topography(TopographySEXP);
    Rcpp::traits::input_parameter< int >::type grid(gridSEXP);
    Rcpp::traits::input_parameter< int >::type Nt(NtSEXP);
    Rcpp::traits::input_parameter< double >::type muG(muGSEXP);
    Rcpp::traits::input_parameter< double >::type sigmaG(sigmaGSEXP);
    Rcpp::traits::input_parameter< double >::type muE(muESEXP);
    Rcpp::traits::input_parameter< double >::type sigmaE(sigmaESEXP);
    Rcpp::traits::input_parameter< double >::type Pfall(PfallSEXP);
    Rcpp::traits::input_parameter< int >::type Rgaps(RgapsSEXP);
    Rcpp::traits::input_parameter< double >::type Pdeath(PdeathSEXP);
    Rcpp::traits::input_parameter< int >::type Ns(NsSEXP);
    Rcpp::traits::input_parameter< int >::type Rdispersal(RdispersalSEXP);
    Rcpp::traits::input_parameter< bool >::type determinist(deterministSEXP);
    rcpp_result_gen = Rcpp::wrap(simulatorCpp(Topography, grid, Nt, muG, sigmaG, muE, sigmaE, Pfall, Rgaps, Pdeath, Ns, Rdispersal, determinist));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ecoevosimulator_disperse", (DL_FUNC) &_ecoevosimulator_disperse, 3},
    {"_ecoevosimulator_forestgapdynamics", (DL_FUNC) &_ecoevosimulator_forestgapdynamics, 3},
    {"_ecoevosimulator_simulatorCpp", (DL_FUNC) &_ecoevosimulator_simulatorCpp, 13},
    {NULL, NULL, 0}
};

RcppExport void R_init_ecoevosimulator(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
